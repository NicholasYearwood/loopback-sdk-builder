<% if (isTyped) { -%>/* tslint:disable */<% } -%>

<% if (framework === 'angular2') { -%>
import { HttpClient, HttpHeaders, HttpRequest, HttpParams, HttpResponse, HttpParameterCodec } from '@angular/common/http';
import { NgModule, ModuleWithProviders, Injectable, Inject, Optional } from '@angular/core';
<% } %>

import { ErrorHandler } from '../core/error.service';
import { LoopBackAuth } from '../core/auth.service';
import { LoopBackConfig } from '../../lb.config';
import { LoopBackFilter, AccessToken } from '../../models/BaseModels';
import { SDKModels } from '../custom/SDKModels';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import { catchError, map, filter } from 'rxjs/operators';

<% for (var modelName in models) {
  var meta = models[modelName];
  // capitalize the model name
  modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
import { <%- modelName %> } from '../../models/<%- modelName %>';
import { <%- modelName %>Api } from '../../services/custom/<%- modelName %>';
<% } // for modelName in models -%>

import { BaseLoopBackApi } from '../core/base.service';

<% if (isTyped) { -%>
export interface Apis { [model: string]: BaseLoopBackApi }
<% } -%>
<% if (framework === 'angular2') { -%>
@Injectable()
<% } %>
export class SDKApis {
<% if (isTyped) { -%>
	private static constructors: ReadonlyMap<any, { new(
	<% if (framework === 'angular2') { -%> http: HttpClient, <% } %>
	<% if (framework === 'react') { -%> http: Http, <% } %>
	<% if (isIo === 'enabled') { -%> connection: SocketConnection, <% } %>
		models: SDKModels,
		auth: LoopBackAuth,
	<% if (framework === 'react') { -%> searchParams: JSONSearchParams, <% } %>
		errorHandler: ErrorHandler
	): any }> = new Map<any, { new(
	<% if (framework === 'angular2') { -%> http: HttpClient, <% } %>
	<% if (framework === 'react') { -%> http: Http, <% } %>
	<% if (isIo === 'enabled') { -%> connection: SocketConnection, <% } %>
		models: SDKModels,
		auth: LoopBackAuth,
	<% if (framework === 'react') { -%> searchParams: JSONSearchParams, <% } %>
		errorHandler: ErrorHandler
	): any }> ([
    <% for ( modelName in models ) { %> [ <%= modelName %>, <%= modelName %>Api ], <% } %>
	]);

	private cached: BaseLoopBackApi[] = [];

	constructor(
	<%- buildServiceDI(isIo) %>
	) {
		
	}
	public get(modelOrModelName: any): BaseLoopBackApi {
		return this.cached[modelOrModelName] || (
				this.cached[typeof(modelOrModelName) === "string" ? this.models.get(modelOrModelName) : modelOrModelName] =
				this.cached[typeof(modelOrModelName) !== "string" ? modelOrModelName.getModelName() : modelOrModelName] =
				new (SDKApis.constructors.get(typeof(modelOrModelName) === "string" ? this.models.get(modelOrModelName) : modelOrModelName))(
			this.http,
		<% if (isIo === 'enabled') { %> this.connection, <% } %>
			this.models,
			this.auth,
		<% if (framework === 'react') { -%> this.searchParams, <% } %>
			this.errorHandler
		));
	}
<% } else { -%>

<% } -%>
}
